{
    "docs": [
        {
            "location": "/",
            "text": "nodepy\n\n\n\n\n\n\n\n\nnodepy\n is a CPython platform heavily inspired by \nNode.js\n for building\nreproducible and easily distributable applications. While it provides its own\npackage infrastructure similar to \nnpm\n, re-using existing standard Python\nmodules from \nPyPI\n is highly encouraged by the package manager, \nnodepy-pm\n,\nwhich is automatically installed with nodepy.\n\n\nRequirements\n\n\n\n\nPython 2.7.x, 3.3+\n\n\nPip 8.0.0+\n\n\n\n\nInstallation\n\n\npip install node.py\n\n\n\n\n\nAdditional Links\n\n\n\n\nDocumentation\n\n\nChangelog",
            "title": "Home"
        },
        {
            "location": "/#nodepy",
            "text": "nodepy  is a CPython platform heavily inspired by  Node.js  for building\nreproducible and easily distributable applications. While it provides its own\npackage infrastructure similar to  npm , re-using existing standard Python\nmodules from  PyPI  is highly encouraged by the package manager,  nodepy-pm ,\nwhich is automatically installed with nodepy.",
            "title": "nodepy"
        },
        {
            "location": "/#requirements",
            "text": "Python 2.7.x, 3.3+  Pip 8.0.0+",
            "title": "Requirements"
        },
        {
            "location": "/#installation",
            "text": "pip install node.py",
            "title": "Installation"
        },
        {
            "location": "/#additional-links",
            "text": "Documentation  Changelog",
            "title": "Additional Links"
        },
        {
            "location": "/changelog/",
            "text": "Changelog\n\n\nv0.0.20\n\n\nnodepy\n\n\n\n\nFix \nnodepy.proc_args\n to contain \nsys.executable\n if the nodepy executable\n  is not an \n.exe\n on Windows\n\n\nAdd \nBaseModule.real_filename\n as \nBaseModule.filename\n must always match\n  the filename that was passed into the loader (otherwise \nBaseModule.remove()\n\n  does not work)\n\n\nAdd \nPythonLoader.preprocessor\n list\n\n\nAdd \nPythonLoader.unpack_require_preprocessor()\n static method\n\n\nAdd \nrequire()\n unpack syntax by preprocessing loaded source code\n\n\n\n\nnodepy-pm (PPYM post v0.0.17)\n\n\n\n\nmerged code into Node.py repository (now developed and released alongside\n  Node.py)\n\n\nrenamed to \nnodepy-pm\n\n\nFix #9 (partially): Pip install fails with FileNotFoundError: installed-files.txt\n  \u2013 added \nlib/brewfix.py\n which temporarily (over)writes \n~/.pydistutils.cfg\n,\n  only fixes \n--user\n installs of Node.py (and installs in Virtualenv still\n  work flawlessly, too)\n\n\nFix \nppym install --save\n saving version as \n^VERSION\n which is wrong,\n  now uses \n~VERSION\n\n\nFix \nenv:get_module_dist_info()\n replacing hyphens by underscores, as Pip\n  does it\n\n\nBetter detection of module \n.dist-info\n\n\nTo detect the install locations for Node.py modules and scripts, PPYM now\n  uses \npip.locations.distutils_scheme()\n\n\nImport \ndistlib\n from \npip._vendor\n if it can\u2019t be imported as is\n\n\nAdd \n-v,--verbose\n option to \nppym install\n\n\nInstalling Python dependencies with \n--root\n and \n-g,--global\n should now\n  be consistent with Pip\u2019s default behaviour with the respective installation\n  modes (\npip install\n and \npip install --user\n)\n\n\nConfiguration option \nprefix\n is no longer used, (root/global) Node.py\n  modules are now installed nearby Python\u2019s \nsite-packages\n and Scripts\n  are placed into Python\u2019s script directory\n\n\nDevelopment has been merged into the Node.py repository itself\n\n\n\n\nv0.0.19\n\n\n\n\ndeprecate \nnode.py\n program name for \nnodepy\n\n\non develop installs, use \nnode.py-X.Y\n name for \nsetup()\n where \nX.Y\n is the\n  Python major and minor version number, to avoid conflicts when installing to\n  multiple installations\n\n\nadd \nRequire.PY2\n and \nRequire.PY3\n\n\nadd \nrequire.symbols(request, symbols=None)\n to selectively import symbols\n  from another module\n\n\nfix \n-c\n argument\n\n\nwhen a \nnodepy_modules/\n directory is close to a Node.py module, not only\n  Node.py dependencies will be searched in this directory also Python modules\n  can be found in it as well (from the \n.pip\n directory). Note that unlike for\n  Node.py modules, the farthest \nnodepy_modules/.pip\n directory takes precedence\n  when importing a Python module and that they are not unique for the scope\n  of that module\u2019s nearest \nnodepy_modules/\n directory, and instead will be\n  available globally even after the Node.py modules was loaded.\n\n\nadd \nnodepy.proc_args\n and \nnodepy.executable\n data members\n\n\nadd \nrequire.subprocess()\n function\n\n\nadd \nrequire.subprocess_args()\n function\n\n\nFix #20: py_compile causes PermissionError when file is read from an\n  unwritable location\n\n\nadd \n-L,--loader\n argument to \nnodepy\n command-line\n\n\nadd \nrequire(loader=None)\n argument\n\n\nnodepy\n interactive banner now shows the Python maxsize (usually 32 or 64)\n\n\nadd \nBaseModule.remove()\n method\n\n\nfix #19: A module that fails to execute must be automatically cleared from\n  the module cache again\n\n\nupgrade to PPYM v0.0.17\n\n\n\n\nv0.0.18\n\n\n\n\nHotfix for bundled PPYM (now in version v0.0.16) \u2013 fixes installation\n  into Python root directory\n\n\n\n\nv0.0.17\n\n\n\n\nrename \nInteractiveSessionModule\n to \nInitModule\n\n\nadd \n-P,--preload\n option\n\n\nadd \nnodepy.get_python_library_path()\n\n\nadd \ndoraise=True\n to \npy_compile.compile()\n call\n\n\nadd \n--pymain\n option\n\n\nFix #21: Bug with Click and Py2: invalid arguments used for argument parsing\n  \u2013 by importing \nclick\n before altering \nsys.argv\n if possible\n\n\nadd \nrequire(into)\n parameter\n\n\nupgrade to PPYM v0.0.15\n\n\n\n\nv0.0.16\n\n\n\n\nfix \nrequire('.')\n and \nrequire('..')\n being resolved in the PATH rather\n  then relative to the current directory\n\n\nadd \nBaseModule.parent\n and \nBaseModule.request\n\n\nadd \nContext.event_handlers\n and \nContext.send_event()\n\n\nevents \nload\n, \nrequire\n and \nenter\n are now sent via \nContext.event_handlers\n\n\nadd \nRequire.cache\n\n\nadd \n'__init__'\n to \nContext.index_files\n, \n'index'\n might get deprecated\n  in the future\n\n\n\n\nv0.0.15\n\n\n\n\nfix interactive Node.py session (NameError variable \ncode\n)\n\n\nnow install multiple versions of the \nnode.py\n command for the Python\n  version, eg. \nnode.py3\n and \nnode.py3.5\n for Python 3.5\n\n\nfix #17: Requiring another package from a develop install does not resolve\n  in the original installation directory\n\n\nadd \nContext.resolve(followed_from)\n and \nContext.load_module(followed_from)\n\n\nadd \nContext.resolve_and_load()\n which automatically adds an element to\n  \nRequire.path\n for package links\n\n\nadd \nRequire.path\n\n\nadd \nBaseModule.require\n\n\nremove \nUnknownModuleTypeError\n for now, \nContext.load_module()\n now raises\n  a \nValueError\n if no loader could be determined\n\n\nadd \nContext(bare=False)\n parameter\n\n\nrename \nNodepyModule\n to \nPythonModule\n\n\nremove \nNodepyByteModule\n\n\nadd \nPythonModule(code)\n parameter\n\n\nadd \nget_python_library_base()\n\n\nreplace \n_py_loader()\n function with \nPythonLoader\n class\n\n\nthe \nPythonLoader\n class now writes a bytecache from the source file if\n  \nPYTHONDONTWRITEBYTECODE\n is not set\n\n\n\n\nv0.0.14\n\n\n\n\nadd nice string representation of \nResolveError\n\n\nPython modules loaded with \nrequire()\n no longer inherit Node.py\u2019s future flags\n\n\nupgrade PPYM to v0.0.13\n\n\n\n\nv0.0.13\n\n\n\n\nsetup.py\n installs PPYM into user directory if Node.py is installed\n  into user directory\n\n\nadd \n--keep-arg0\n argument to \nnode.py\n, which is used when PPYM installs\n  a command-line script\n\n\nContext.load_module()\n now accepts an explicit \nloader\n argument\n\n\nadd \nContext.get_extension()\n\n\nadd \nContext.current_modules\n\n\nalways add local \nnodepy_modules/\n directory to \nContext.path\n\n\nadd \nRequire.hide_main()\n\n\nexports\n argument to \nRequire.__call__()\n\n\nadd \nContext.register_index_file()\n\n\n\n\nv0.0.12\n\n\n\n\nremove \nnodepy.Directories\n class again, we only need to compute the\n  local \nnodepy_modules/.pip\n library directory\n\n\nentering \nContext\n no longer adds to \nPATH\n\n\nupgrade bundled PPYM to v0.0.10\n\n\nsetup.py\n no longer installs PPYM dependencies\n\n\n12a: Re-add \ninstall_deps()\n to \nsetup.py\n, we need to make sure our\n  dependencies are installed before PPYM can be bootstrapped\n\n\n\n\nv0.0.11\n\n\n\n\nadd \nRequire.__call__(current_dir=None, is_main=False, cache=True)\n arguments\\\n\n\nadd \nRequire.exec_module()\n method\n\n\nadd \nSession.load_module(cache=True)\n argument\n\n\nadd \nDirectories\n class which generates the paths to look for Python modules\n  installed via Pip through PPYM and more\n\n\nentering the Node.py \nContext\n now adds the local \nnodepy_modules/.bin\n\n  directory to the \nPATH\n environment variable\n\n\n\n\nv0.0.10\n\n\n\n\nextensions are now checked in the order they are registered\n\n\nsupport loading bytecache files with the suffix \n.cpython-XY.pyc\n\n\nthe \n.py\n loader now loads the respective bytecache file if appropriate\n\n\nContext.register_binding()\n now accepts arbitrary objects, not just\n  \nBaseModule\n instances\n\n\nadd \nrequire.current\n and \nContext.current_module\n properties\n\n\nsupport for \n.nodepy-link\n files as created by \nppym install -e\n\n\nadd \n-v, --verbose\n argument for debug prints when resolving module filenames\n\n\nuse \nargparse\n instead of \nclick\n due to problem with known arguments\n  being consumed and not passed to the Node.py main module\n\n\nupgrade bundled PPYM to v0.0.8\n\n\nsetup.py develop\n now passes \n--develop\n to \nppym/bootstrap\n\n\n\n\nv0.0.9\n\n\n\n\nsetup.py\n \u2013 Fix creation of \nnode.py\n script on Windows by hooking\n  \ndistlib.scripts.ScriptMaker\n (see issue #11)\n\n\nrequire.main\n property can now be set\n\n\nupdate bundled PPYM to v0.0.7\n\n\nsetup.py\n now always upgrades to the bundled PPYM installation",
            "title": "Changelog"
        },
        {
            "location": "/changelog/#changelog",
            "text": "",
            "title": "Changelog"
        },
        {
            "location": "/changelog/#v0020",
            "text": "nodepy   Fix  nodepy.proc_args  to contain  sys.executable  if the nodepy executable\n  is not an  .exe  on Windows  Add  BaseModule.real_filename  as  BaseModule.filename  must always match\n  the filename that was passed into the loader (otherwise  BaseModule.remove() \n  does not work)  Add  PythonLoader.preprocessor  list  Add  PythonLoader.unpack_require_preprocessor()  static method  Add  require()  unpack syntax by preprocessing loaded source code   nodepy-pm (PPYM post v0.0.17)   merged code into Node.py repository (now developed and released alongside\n  Node.py)  renamed to  nodepy-pm  Fix #9 (partially): Pip install fails with FileNotFoundError: installed-files.txt\n  \u2013 added  lib/brewfix.py  which temporarily (over)writes  ~/.pydistutils.cfg ,\n  only fixes  --user  installs of Node.py (and installs in Virtualenv still\n  work flawlessly, too)  Fix  ppym install --save  saving version as  ^VERSION  which is wrong,\n  now uses  ~VERSION  Fix  env:get_module_dist_info()  replacing hyphens by underscores, as Pip\n  does it  Better detection of module  .dist-info  To detect the install locations for Node.py modules and scripts, PPYM now\n  uses  pip.locations.distutils_scheme()  Import  distlib  from  pip._vendor  if it can\u2019t be imported as is  Add  -v,--verbose  option to  ppym install  Installing Python dependencies with  --root  and  -g,--global  should now\n  be consistent with Pip\u2019s default behaviour with the respective installation\n  modes ( pip install  and  pip install --user )  Configuration option  prefix  is no longer used, (root/global) Node.py\n  modules are now installed nearby Python\u2019s  site-packages  and Scripts\n  are placed into Python\u2019s script directory  Development has been merged into the Node.py repository itself",
            "title": "v0.0.20"
        },
        {
            "location": "/changelog/#v0019",
            "text": "deprecate  node.py  program name for  nodepy  on develop installs, use  node.py-X.Y  name for  setup()  where  X.Y  is the\n  Python major and minor version number, to avoid conflicts when installing to\n  multiple installations  add  Require.PY2  and  Require.PY3  add  require.symbols(request, symbols=None)  to selectively import symbols\n  from another module  fix  -c  argument  when a  nodepy_modules/  directory is close to a Node.py module, not only\n  Node.py dependencies will be searched in this directory also Python modules\n  can be found in it as well (from the  .pip  directory). Note that unlike for\n  Node.py modules, the farthest  nodepy_modules/.pip  directory takes precedence\n  when importing a Python module and that they are not unique for the scope\n  of that module\u2019s nearest  nodepy_modules/  directory, and instead will be\n  available globally even after the Node.py modules was loaded.  add  nodepy.proc_args  and  nodepy.executable  data members  add  require.subprocess()  function  add  require.subprocess_args()  function  Fix #20: py_compile causes PermissionError when file is read from an\n  unwritable location  add  -L,--loader  argument to  nodepy  command-line  add  require(loader=None)  argument  nodepy  interactive banner now shows the Python maxsize (usually 32 or 64)  add  BaseModule.remove()  method  fix #19: A module that fails to execute must be automatically cleared from\n  the module cache again  upgrade to PPYM v0.0.17",
            "title": "v0.0.19"
        },
        {
            "location": "/changelog/#v0018",
            "text": "Hotfix for bundled PPYM (now in version v0.0.16) \u2013 fixes installation\n  into Python root directory",
            "title": "v0.0.18"
        },
        {
            "location": "/changelog/#v0017",
            "text": "rename  InteractiveSessionModule  to  InitModule  add  -P,--preload  option  add  nodepy.get_python_library_path()  add  doraise=True  to  py_compile.compile()  call  add  --pymain  option  Fix #21: Bug with Click and Py2: invalid arguments used for argument parsing\n  \u2013 by importing  click  before altering  sys.argv  if possible  add  require(into)  parameter  upgrade to PPYM v0.0.15",
            "title": "v0.0.17"
        },
        {
            "location": "/changelog/#v0016",
            "text": "fix  require('.')  and  require('..')  being resolved in the PATH rather\n  then relative to the current directory  add  BaseModule.parent  and  BaseModule.request  add  Context.event_handlers  and  Context.send_event()  events  load ,  require  and  enter  are now sent via  Context.event_handlers  add  Require.cache  add  '__init__'  to  Context.index_files ,  'index'  might get deprecated\n  in the future",
            "title": "v0.0.16"
        },
        {
            "location": "/changelog/#v0015",
            "text": "fix interactive Node.py session (NameError variable  code )  now install multiple versions of the  node.py  command for the Python\n  version, eg.  node.py3  and  node.py3.5  for Python 3.5  fix #17: Requiring another package from a develop install does not resolve\n  in the original installation directory  add  Context.resolve(followed_from)  and  Context.load_module(followed_from)  add  Context.resolve_and_load()  which automatically adds an element to\n   Require.path  for package links  add  Require.path  add  BaseModule.require  remove  UnknownModuleTypeError  for now,  Context.load_module()  now raises\n  a  ValueError  if no loader could be determined  add  Context(bare=False)  parameter  rename  NodepyModule  to  PythonModule  remove  NodepyByteModule  add  PythonModule(code)  parameter  add  get_python_library_base()  replace  _py_loader()  function with  PythonLoader  class  the  PythonLoader  class now writes a bytecache from the source file if\n   PYTHONDONTWRITEBYTECODE  is not set",
            "title": "v0.0.15"
        },
        {
            "location": "/changelog/#v0014",
            "text": "add nice string representation of  ResolveError  Python modules loaded with  require()  no longer inherit Node.py\u2019s future flags  upgrade PPYM to v0.0.13",
            "title": "v0.0.14"
        },
        {
            "location": "/changelog/#v0013",
            "text": "setup.py  installs PPYM into user directory if Node.py is installed\n  into user directory  add  --keep-arg0  argument to  node.py , which is used when PPYM installs\n  a command-line script  Context.load_module()  now accepts an explicit  loader  argument  add  Context.get_extension()  add  Context.current_modules  always add local  nodepy_modules/  directory to  Context.path  add  Require.hide_main()  exports  argument to  Require.__call__()  add  Context.register_index_file()",
            "title": "v0.0.13"
        },
        {
            "location": "/changelog/#v0012",
            "text": "remove  nodepy.Directories  class again, we only need to compute the\n  local  nodepy_modules/.pip  library directory  entering  Context  no longer adds to  PATH  upgrade bundled PPYM to v0.0.10  setup.py  no longer installs PPYM dependencies  12a: Re-add  install_deps()  to  setup.py , we need to make sure our\n  dependencies are installed before PPYM can be bootstrapped",
            "title": "v0.0.12"
        },
        {
            "location": "/changelog/#v0011",
            "text": "add  Require.__call__(current_dir=None, is_main=False, cache=True)  arguments\\  add  Require.exec_module()  method  add  Session.load_module(cache=True)  argument  add  Directories  class which generates the paths to look for Python modules\n  installed via Pip through PPYM and more  entering the Node.py  Context  now adds the local  nodepy_modules/.bin \n  directory to the  PATH  environment variable",
            "title": "v0.0.11"
        },
        {
            "location": "/changelog/#v0010",
            "text": "extensions are now checked in the order they are registered  support loading bytecache files with the suffix  .cpython-XY.pyc  the  .py  loader now loads the respective bytecache file if appropriate  Context.register_binding()  now accepts arbitrary objects, not just\n   BaseModule  instances  add  require.current  and  Context.current_module  properties  support for  .nodepy-link  files as created by  ppym install -e  add  -v, --verbose  argument for debug prints when resolving module filenames  use  argparse  instead of  click  due to problem with known arguments\n  being consumed and not passed to the Node.py main module  upgrade bundled PPYM to v0.0.8  setup.py develop  now passes  --develop  to  ppym/bootstrap",
            "title": "v0.0.10"
        },
        {
            "location": "/changelog/#v009",
            "text": "setup.py  \u2013 Fix creation of  node.py  script on Windows by hooking\n   distlib.scripts.ScriptMaker  (see issue #11)  require.main  property can now be set  update bundled PPYM to v0.0.7  setup.py  now always upgrades to the bundled PPYM installation",
            "title": "v0.0.9"
        },
        {
            "location": "/troubleshooting/",
            "text": "Troubleshooting\n\n\nmust supply either home or prefix/exec-prefix \u2013 not both\n\n\ndistutils.errors.DistutilsOptionError: must supply either home or prefix/exec-prefix -- not both\n\n\n\n\n\nBefore \nnodepy-pm\n v0.0.20, this error could appear on macOS and Python\nversions installed via \nHomebrew\n (see \nthis StackOverflow question\n).\nSince this version, the package manager creates or temporarily overwrites\nthe file \n~/.pydistutils.cfg\n to set an empty \nprefix\n.\n\n\nIf you still encounter this error, please \ncreate an issue\n.",
            "title": "Troubleshooting"
        },
        {
            "location": "/troubleshooting/#troubleshooting",
            "text": "",
            "title": "Troubleshooting"
        },
        {
            "location": "/troubleshooting/#must-supply-either-home-or-prefixexec-prefix-not-both",
            "text": "distutils.errors.DistutilsOptionError: must supply either home or prefix/exec-prefix -- not both  Before  nodepy-pm  v0.0.20, this error could appear on macOS and Python\nversions installed via  Homebrew  (see  this StackOverflow question ).\nSince this version, the package manager creates or temporarily overwrites\nthe file  ~/.pydistutils.cfg  to set an empty  prefix .  If you still encounter this error, please  create an issue .",
            "title": "must supply either home or prefix/exec-prefix -- not both"
        },
        {
            "location": "/nodepy/",
            "text": "The nodepy API\n\n\nPython code that is invoked via \nnodepy\n has a few additional built-ins\navailable.\n\n\n\n\nrequire()\n\n\nmodule\n\n\n__directory__\n\n\n\n\nrequire()\n\n\nrequire(request, current_dir=None, is_main=False, cache=True,\n        exports=True, exec_=True, into=None, symbols=None)\n\n\n\n\n\nThe \nrequire()\n function in \nnodepy\n is available to every module that is\nexecuted through the nodepy command-line or which is in turn loaded with the\n\nrequire()\n function. It is an instance of the \nnodepy.Require\n class,\ncreated uniquely for every loaded module.\n\n\nA special syntax loading only some components of a module is supported, which\nis called the \u201crequire unpack\u201d syntax. It is turned into valid Python code\nbefore a module is loaded. Instead of having to assign the required module to\na temporary variable or using the require function multiple times\n\n\nmember_1\n \n=\n \nrequire\n(\n'some-module'\n)\n.\nmember_1\n\n\nmember_2\n \n=\n \nrequire\n(\n'some-module'\n)\n.\nthis_is_called_differently\n\n\n\n\n\n\nyou can use the \u201crequire unpack\u201d syntax.\n\n\n{\n \nmember_1\n,\n \nthis_is_called_differently\n \nas\n \nmember_2\n \n}\n \n=\n \nrequire\n(\n'some-module'\n)\n\n\n\n\n\n\nrequire.context\n\n\nThe \nnodepy.Context\n object that is currently in charge of the execution.\n\n\nrequire.main\n\n\nAlias for \nrequire.context.main_module\n. Returns the main \nnodepy.BaseModule\n\nobject that is being executed. Note that the main module can change during\nexecution of a program by using \nrequire.exec_main()\n.\n\n\nrequire.current\n\n\nThe currently executed \nnodepy.BaseModule\n. A module is on the stack of\ncurrently executed modules until the execution has reached the end of the\nscript and the \nrequire()\n function that was used to load it returns.\n\n\nrequire.exec_main()\n\n\nExecute another module as the new main module. As soon as \nexec_main()\n\nreturns, the original main module will be in place again.\n\n\nrequire.path\n\n\nNodepy module search path for this \nnodepy.Require\n instance.\n\n\nmodule\n\n\nThis built-in is the \nnodepy.BaseModule\n object that represents the module\nthat is being executed. This is commonly used to check if the module is\nexecuted as the main module.\n\n\nif\n \nrequire\n.\nmain\n \n==\n \nmodule\n:\n\n  \n# ...\n\n\n\n\n\n\n__directory__\n\n\nContains the parent directory of the currently executed module. This is the\nsame as \nos.path.dirname(__file__)\n and is provided for convenience.",
            "title": "nodepy"
        },
        {
            "location": "/nodepy/#the-nodepy-api",
            "text": "Python code that is invoked via  nodepy  has a few additional built-ins\navailable.   require()  module  __directory__",
            "title": "The nodepy API"
        },
        {
            "location": "/nodepy/#require",
            "text": "require(request, current_dir=None, is_main=False, cache=True,\n        exports=True, exec_=True, into=None, symbols=None)  The  require()  function in  nodepy  is available to every module that is\nexecuted through the nodepy command-line or which is in turn loaded with the require()  function. It is an instance of the  nodepy.Require  class,\ncreated uniquely for every loaded module.  A special syntax loading only some components of a module is supported, which\nis called the \u201crequire unpack\u201d syntax. It is turned into valid Python code\nbefore a module is loaded. Instead of having to assign the required module to\na temporary variable or using the require function multiple times  member_1   =   require ( 'some-module' ) . member_1  member_2   =   require ( 'some-module' ) . this_is_called_differently   you can use the \u201crequire unpack\u201d syntax.  {   member_1 ,   this_is_called_differently   as   member_2   }   =   require ( 'some-module' )",
            "title": "require()"
        },
        {
            "location": "/nodepy/#requirecontext",
            "text": "The  nodepy.Context  object that is currently in charge of the execution.",
            "title": "require.context"
        },
        {
            "location": "/nodepy/#requiremain",
            "text": "Alias for  require.context.main_module . Returns the main  nodepy.BaseModule \nobject that is being executed. Note that the main module can change during\nexecution of a program by using  require.exec_main() .",
            "title": "require.main"
        },
        {
            "location": "/nodepy/#requirecurrent",
            "text": "The currently executed  nodepy.BaseModule . A module is on the stack of\ncurrently executed modules until the execution has reached the end of the\nscript and the  require()  function that was used to load it returns.",
            "title": "require.current"
        },
        {
            "location": "/nodepy/#requireexec_main",
            "text": "Execute another module as the new main module. As soon as  exec_main() \nreturns, the original main module will be in place again.",
            "title": "require.exec_main()"
        },
        {
            "location": "/nodepy/#requirepath",
            "text": "Nodepy module search path for this  nodepy.Require  instance.",
            "title": "require.path"
        },
        {
            "location": "/nodepy/#module",
            "text": "This built-in is the  nodepy.BaseModule  object that represents the module\nthat is being executed. This is commonly used to check if the module is\nexecuted as the main module.  if   require . main   ==   module : \n   # ...",
            "title": "module"
        },
        {
            "location": "/nodepy/#__directory__",
            "text": "Contains the parent directory of the currently executed module. This is the\nsame as  os.path.dirname(__file__)  and is provided for convenience.",
            "title": "__directory__"
        },
        {
            "location": "/nodepy-pm/manifest/",
            "text": "nodepy-pm/lib/manifest\n\n\nParse package manifests.\n\n\nmanifest\n \n=\n \nrequire\n(\n'nodepy-pm/lib/manifest'\n)\n\n\ntry\n:\n\n  \nm\n \n=\n \nmanifest\n.\nparse\n(\n'package.json'\n)\n\n\nexcept\n \n(\nFileNotFoundError\n,\n \nmanifest\n.\nInvalidPackageManifest\n)\n \nas\n \nexc\n:\n\n  \nprint\n(\nexc\n)\n\n  \nm\n \n=\n \nNone\n\n\n\n\n\n\nSpecification\n\n\nname\n\n\nRequired.\n The name of the package. This may be a scope identifier\nof the format \n@scope/package-name\n, or simply \npackage-name\n. Allowed\ncharacters for the scope and package name are digits, ASCII letters and \n-_.\n.\n\n\n{\n \n\"name\"\n:\n \n\"@scope-name/package-name\"\n \n}\n\n\n\n\n\n\nversion\n\n\nRequired.\n A \nSemVer\n of the package\u2019s version.\n\n\n{\n \n\"version\"\n:\n \n\"0.0.1-security\"\n \n}\n\n\n\n\n\n\nengines\n\n\nOptional.\n An object that maps engine-names to version numbers. These version\nnumbers should be \nSemVer\n too, but that is not a requirement. The actual\nengine that runs the package will check the version number. The default engine\nis \npython\n which compares against the Python version number.\n\n\nTODO: PyPy, JPython, Stackless, etc. should match to different engine names.\n\n\n{\n\n  \n\"engines\"\n:\n \n{\n\n    \n\"python\"\n:\n \n\">=3.0.0\"\n\n  \n}\n\n\n}\n\n\n\n\n\n\nrepository\n\n\nOptional\n. URL to the source code repository where the package is developed.\nIf specified, the URL must be valid.\n\n\n{\n \n\"repository\"\n:\n \n\"https://github.com/nodepy/nodepy\"\n \n}\n\n\n\n\n\n\nlicense\n\n\nRequired when publishing a package on the registry.\n The license of the\npackage source code.\n\n\n{\n \n\"license\"\n:\n \n\"MIT\"\n \n}\n\n\n\n\n\n\nbin\n\n\nOptional.\n An object that associates script names with a request string\nthat is then executed as the main module when the script is executed.\n\n\n{\n\n  \n\"bin\"\n:\n \n{\n\n    \n\"manifest\"\n:\n \n\"cli\"\n\n  \n}\n\n\n}\n\n\n\n\n\n\nscripts\n\n\nOptional.\n An object that associates event names with Node.py modules\nwhich are executed during various events of the package lifecycle.\n\n\n{\n\n  \n\"scripts\"\n:\n \n{\n\n    \n\"post-install\"\n:\n \n\"./bin/install.py\"\n,\n\n    \n\"pre-uninstall\"\n:\n \n\"./bin/uninstall.py\"\n,\n\n    \n\"pre-dist\"\n:\n \n\"./bin/dist.py\"\n\n  \n}\n\n\n}\n\n\n\n\n\n\nCurrently supported fields are:\n\n\n\n\npre-script\n\n\npre-install, post-install\n\n\npre-uninstall\n\n\npre-dist, post-dist\n\n\npre-publish, post-publish\n\n\n\n\nTodo\n\n\n\n\npost-uninstall\n\n\npre-version, post-version\n\n\npre-test, test, post-test\n\n\npre-stop, stop, post-stop\n\n\npre-start, start, post-start\n\n\npre-restart, restart, post-restart\n\n\n\n\nprivate\n\n\nOptional\n. Prevent publication of the package with \nnodepy-pm publish\n. This is used\nfor packages that want to take advantage of the nodepy-pm dependency management but\nare not actuall supposed to be placed into the public registry. An example\nof this would be a package that generates the documentation of another project.\n\n\n{\n \n\"private\"\n:\n \ntrue\n \n}\n\n\n\n\n\n\ndependencies\n\n\nOptional.\n: An object that specifies the dependencies of the package.\nAll values must be valid \nnodepy-pm/lib/semver:Selector\n syntax, Git URL syntax\nof the format \ngit+<url>[@<ref>]\n or relative paths of the format\n\n[-e] [./|../]<path>\n. Dependencies declared here will be installed\ntransitively.\n\n\n{\n\n  \n\"dependencies\"\n:\n \n{\n\n    \n\"nodepy-pm\"\n:\n \n\"~0.0.8\"\n,\n\n    \n\"nodepy-pm-registry\"\n:\n \n\"~0.0.3\"\n,\n\n    \n\"some-module\"\n:\n \n\"git+https://github.com/someuser/some-module.git@development\"\n,\n\n    \n\"local-module\"\n:\n \n\"-e ../local-module\"\n\n  \n}\n\n\n}\n\n\n\n\n\n\ndev-dependencies\n\n\nOptional\n. Dependencies that are listed here are required only for developing\na package, thus they will only be installed when using \nnodepy-pm install\n without\nadditional arguments in the directory where the \npackage.json\n file lives,\nunless \n--production\n is specified. Also, development dependencies will not be\ninstalled transitively.\n\n\n{\n\n  \n\"dev-dependencies\"\n:\n \n{\n\n    \n\"js-nodepy\"\n:\n \n\"~0.0.2\"\n\n  \n}\n\n\n}\n\n\n\n\n\n\npython-dependencies\n\n\nOptional.\n Similar to the \ndependencies\n field, but it specifies actual\nPython modules that the package requires. These modules can be installed\nby \nnodepy-pm\n using \nPip\n.\n\n\n{\n\n  \n\"python-dependencies\"\n:\n \n{\n\n    \n\"Flask\"\n:\n \n\"==0.12\"\n,\n\n    \n\"Flask-HTTPAuth\"\n:\n \n\"==3.2.2\"\n,\n\n    \n\"mongoengine\"\n:\n \n\"==0.11.0\"\n\n  \n}\n\n\n}\n\n\n\n\n\n\ndev-python-dependencies\n\n\nOptional\n. Python dependencies that are required for developing the package.\nSee the \ndev-dependencies\n field for when development dependencies are\ninstalled.\n\n\n{\n\n  \n\"dev-python-dependencies\"\n:\n \n{\n\n    \n\"mkdocs\"\n:\n \n\">=0.16.1\"\n\n  \n}\n\n\n}\n\n\n\n\n\n\ndist\n\n\nOptional\n. An object that specifies options for generating an archived\ndistribution of the package with \nnodepy-pm dist\n.\n\n\n  \n\"dist\"\n:\n \n{\n\n    \n\"include_files\"\n:\n \n[],\n\n    \n\"exclude_files\"\n:\n \n[\n\".hg*\"\n]\n\n  \n}\n\n\n\n\n\n\ninclude_files\n\n\nOptional.\n A list of patterns that match the files to include.\nMatching patterns include files possibly excluded by \nexclude_files\n.\n\n\nexclude_files\n\n\nOptional.\n A list of patterns that match the files to exclude from the\narchive. Note that when installing packages with \nnodepy-pm\n, it will add\ndefault exclude patterns to this list. The actual patterns may change\nwith versions of nodepy-pm. When this document was last updated, nodepy-pm added\nthe following patterns:\n\n\n\n\n.svn/*\n\n\n.git\n\n\n.git/*\n\n\n.DS_Store\n\n\n*.pyc\n\n\n*.pyo\n\n\ndist/*\n\n\nnodepy_modules/",
            "title": "package.json"
        },
        {
            "location": "/nodepy-pm/manifest/#nodepy-pmlibmanifest",
            "text": "Parse package manifests.  manifest   =   require ( 'nodepy-pm/lib/manifest' )  try : \n   m   =   manifest . parse ( 'package.json' )  except   ( FileNotFoundError ,   manifest . InvalidPackageManifest )   as   exc : \n   print ( exc ) \n   m   =   None",
            "title": "nodepy-pm/lib/manifest"
        },
        {
            "location": "/nodepy-pm/manifest/#specification",
            "text": "",
            "title": "Specification"
        },
        {
            "location": "/nodepy-pm/manifest/#name",
            "text": "Required.  The name of the package. This may be a scope identifier\nof the format  @scope/package-name , or simply  package-name . Allowed\ncharacters for the scope and package name are digits, ASCII letters and  -_. .  {   \"name\" :   \"@scope-name/package-name\"   }",
            "title": "name"
        },
        {
            "location": "/nodepy-pm/manifest/#version",
            "text": "Required.  A  SemVer  of the package\u2019s version.  {   \"version\" :   \"0.0.1-security\"   }",
            "title": "version"
        },
        {
            "location": "/nodepy-pm/manifest/#engines",
            "text": "Optional.  An object that maps engine-names to version numbers. These version\nnumbers should be  SemVer  too, but that is not a requirement. The actual\nengine that runs the package will check the version number. The default engine\nis  python  which compares against the Python version number.  TODO: PyPy, JPython, Stackless, etc. should match to different engine names.  { \n   \"engines\" :   { \n     \"python\" :   \">=3.0.0\" \n   }  }",
            "title": "engines"
        },
        {
            "location": "/nodepy-pm/manifest/#repository",
            "text": "Optional . URL to the source code repository where the package is developed.\nIf specified, the URL must be valid.  {   \"repository\" :   \"https://github.com/nodepy/nodepy\"   }",
            "title": "repository"
        },
        {
            "location": "/nodepy-pm/manifest/#license",
            "text": "Required when publishing a package on the registry.  The license of the\npackage source code.  {   \"license\" :   \"MIT\"   }",
            "title": "license"
        },
        {
            "location": "/nodepy-pm/manifest/#bin",
            "text": "Optional.  An object that associates script names with a request string\nthat is then executed as the main module when the script is executed.  { \n   \"bin\" :   { \n     \"manifest\" :   \"cli\" \n   }  }",
            "title": "bin"
        },
        {
            "location": "/nodepy-pm/manifest/#scripts",
            "text": "Optional.  An object that associates event names with Node.py modules\nwhich are executed during various events of the package lifecycle.  { \n   \"scripts\" :   { \n     \"post-install\" :   \"./bin/install.py\" , \n     \"pre-uninstall\" :   \"./bin/uninstall.py\" , \n     \"pre-dist\" :   \"./bin/dist.py\" \n   }  }   Currently supported fields are:   pre-script  pre-install, post-install  pre-uninstall  pre-dist, post-dist  pre-publish, post-publish   Todo   post-uninstall  pre-version, post-version  pre-test, test, post-test  pre-stop, stop, post-stop  pre-start, start, post-start  pre-restart, restart, post-restart",
            "title": "scripts"
        },
        {
            "location": "/nodepy-pm/manifest/#private",
            "text": "Optional . Prevent publication of the package with  nodepy-pm publish . This is used\nfor packages that want to take advantage of the nodepy-pm dependency management but\nare not actuall supposed to be placed into the public registry. An example\nof this would be a package that generates the documentation of another project.  {   \"private\" :   true   }",
            "title": "private"
        },
        {
            "location": "/nodepy-pm/manifest/#dependencies",
            "text": "Optional. : An object that specifies the dependencies of the package.\nAll values must be valid  nodepy-pm/lib/semver:Selector  syntax, Git URL syntax\nof the format  git+<url>[@<ref>]  or relative paths of the format [-e] [./|../]<path> . Dependencies declared here will be installed\ntransitively.  { \n   \"dependencies\" :   { \n     \"nodepy-pm\" :   \"~0.0.8\" , \n     \"nodepy-pm-registry\" :   \"~0.0.3\" , \n     \"some-module\" :   \"git+https://github.com/someuser/some-module.git@development\" , \n     \"local-module\" :   \"-e ../local-module\" \n   }  }",
            "title": "dependencies"
        },
        {
            "location": "/nodepy-pm/manifest/#dev-dependencies",
            "text": "Optional . Dependencies that are listed here are required only for developing\na package, thus they will only be installed when using  nodepy-pm install  without\nadditional arguments in the directory where the  package.json  file lives,\nunless  --production  is specified. Also, development dependencies will not be\ninstalled transitively.  { \n   \"dev-dependencies\" :   { \n     \"js-nodepy\" :   \"~0.0.2\" \n   }  }",
            "title": "dev-dependencies"
        },
        {
            "location": "/nodepy-pm/manifest/#python-dependencies",
            "text": "Optional.  Similar to the  dependencies  field, but it specifies actual\nPython modules that the package requires. These modules can be installed\nby  nodepy-pm  using  Pip .  { \n   \"python-dependencies\" :   { \n     \"Flask\" :   \"==0.12\" , \n     \"Flask-HTTPAuth\" :   \"==3.2.2\" , \n     \"mongoengine\" :   \"==0.11.0\" \n   }  }",
            "title": "python-dependencies"
        },
        {
            "location": "/nodepy-pm/manifest/#dev-python-dependencies",
            "text": "Optional . Python dependencies that are required for developing the package.\nSee the  dev-dependencies  field for when development dependencies are\ninstalled.  { \n   \"dev-python-dependencies\" :   { \n     \"mkdocs\" :   \">=0.16.1\" \n   }  }",
            "title": "dev-python-dependencies"
        },
        {
            "location": "/nodepy-pm/manifest/#dist",
            "text": "Optional . An object that specifies options for generating an archived\ndistribution of the package with  nodepy-pm dist .     \"dist\" :   { \n     \"include_files\" :   [], \n     \"exclude_files\" :   [ \".hg*\" ] \n   }",
            "title": "dist"
        },
        {
            "location": "/nodepy-pm/manifest/#include_files",
            "text": "Optional.  A list of patterns that match the files to include.\nMatching patterns include files possibly excluded by  exclude_files .",
            "title": "include_files"
        },
        {
            "location": "/nodepy-pm/manifest/#exclude_files",
            "text": "Optional.  A list of patterns that match the files to exclude from the\narchive. Note that when installing packages with  nodepy-pm , it will add\ndefault exclude patterns to this list. The actual patterns may change\nwith versions of nodepy-pm. When this document was last updated, nodepy-pm added\nthe following patterns:   .svn/*  .git  .git/*  .DS_Store  *.pyc  *.pyo  dist/*  nodepy_modules/",
            "title": "exclude_files"
        },
        {
            "location": "/nodepy-pm/cli/",
            "text": "nodepy-pm\n \u2013 Command-line Interface\n\n\nbin\n\n\nnodepy-pm bin [--global] [--pip]\n\n\n\n\n\nPrints the local or global binary directory that \nnodepy-pm\n installs to. If\nyou pass the \n--pip\n switch, the Pip binary directory will be printed instead.\n\n\nNote that \nnodepy-pm install\n will automatically create wrappers in\nthe Node.py binary directory that reference respective commands in the Pip\nbinary directory, thus if you have Python dependencies that expose scripts,\nyou only need to add the Node.py binary directory to your path.\n\n\nThe local binary directory is \nnodepy_modules/.bin\n.\n\n\n\n\ndist\n\n\nnodepy-pm dist\n\n\n\n\n\nCreate a \n.tar.gz\n archive from your package and save it into the \ndist/\n\ndirectory. If you want to publish the package on the registry, use the\n\nnodepy-pm publish\n command.\n\n\n\n\ninit\n\n\nnodepy-pm init\n\n\n\n\n\nInitialize a \npackage.json\n file in the current working directory.\n\n\n\n\ninstall\n\n\nnodepy-pm install [-g,--global] [--root] [-e,--develop] [-P,--packagedir]\n             [-I,--ignore-installed]\n             [--pip-separate-process] [--dev/--production] [--save]\n             [--save-dev] [--recursive] [PACKAGES]\n\n\n\n\n\nInstalls one or more Node.py packages from the package registry, package\ndistribution files (see \nnodepy-pm dist\n) or a directory. If no PACKAGES\nare specified, the dependencies of the current package are installed. In that\ncase, the \n--dev\n switch is enabled by default, otherwise \n--production\n is\nthe default.\n\n\nThe \nPACKAGES\n argument, if specified, can be of the following type:\n\n\n\n\nA package name and version selector of the format \n<package>[@<version>]\n,\n  in which case the package will be looked up and installed from the package\n  registry.\n\n\nAn existing directory that contains a \npackage.json\n to install from.\n\n\nA Git URL in the format \ngit+<url>[@<ref>]\n to install the package from.\n\n\nA Python package requirement in the format \npy/<req>\n\n\n\n\nWith \n--dev\n enabled, the development dependencies of the packages are\ninstalled additionally to their normal runtime dependencies. Note that\ndevelopment dependencies are never installed transitively.\n\n\nUsing \n--global\n will install the PACKAGES into the user-global modules directory\nand creates scripts in the global binaries directory. Note that \u201cglobal\u201d always\nrefers to the \u201cUser-space global\u201d. Global installations are only supposed to\nbe used for command-line tools. Node.py will not look to resolve \nrequire()\ns\nin the global modules directory for your local project.\n\n\nThe \n--root\n option will install the package into the global Python prefix and\nshould only be used when a command-line utility should be installed for all\nusers of a system.\n\n\n\n\nNote: Inside a virtual environment, \n-g,--global\n will be promoted to \n--root\n.\n\n\n\n\nThe \n--develop\n flag can only be used when installing a package from a\ndirectory. Using this flag will install the package in development mode, which\nmeans that a \n.nodepy-link\n file will be created instead of the package\ncontents being copied. Node.py will read this link and continue resolving\n\nrequire()\ns in the target directory (which is your package that you installed\nwith \n--develop\n).\n\n\nThe \n-I,--ignore-installed\n option will be passed to \npip install\n.\n\n\nThe \n-P,--packagedir\n option can be used to change the directory from which\nthe \npackage.json\n will be read (in case of an installation without packages\nspecified on the command-line) or written to (in case of \n--save\n and\n\n--save-dev\n).\n\n\nUsing the \n--save\n or \n--save-dev\n options requires a \npackage.json\n in the\ncurrent working directory to which the new dependencies can be added. Note\nalso that the package manifest will be re-written with a strict 2-space\nindentation.\n\n\nThe \n--recursive\n option can be used to make sure dependencies of already\nsatisfied dependencies are satisfied as well. This can be useful if you\nuninstall a dependencies of another package and want to re-install them\nwithout remembering them all.\n\n\n\n\npublish\n\n\nnodepy-pm publish [-f,--force] [-u,--user] [-p,--password]\n\n\n\n\n\nA combination of \nnodepy-pm dist\n and \nnodepy-pm upload\n that also\ninvokes the \npre-publish\n and \npost-publish\n \nscripts\n.\n\n\nRequirements\n\n\nIn order to publish a package to \nppym.org\n, it must\nmeet the following requirements:\n\n\n\n\nThe \nname\n of the package must be scoped with your username (ie. \n@username/packagename\n)\n\n\nThe \nlicense\n field in \npackage.json\n must not be empty\n\n\n\n\nAfter a package version has been uploaded to the registry, arbitrary files\nmay be uploaded to that version as well. This is intended to be used for\nadditional files that may be downloaded by the actual package when necessary.\nNote that https://ppym.org currently has a size upload limit of 2MiB.\n\n\nIt is important that you read and understand the \nPPYM Registry Terms of Use\n\nbefore you publish packages and upload content to the registry.\n\n\n\n\nregister\n\n\nnodepy-pm register [--agree-tos] [--save]\n\n\n\n\n\nRegister a new account on the package registry. Note that you can change the\nURL to the registry being used in the \n~/.ppymrc\n file. By default, it will\npoint to https://ppym.org.\n\n\n$ cat ~/.ppymrc\n\nregistry\n=\nhttp://localhost:8000\n\n\n\n\n\n\n\nrun\n\n\nnodepy-pm run SCRIPT [ARGS]\n\n\n\n\n\nRuns the SCRIPT that is specified in the current package\u2019s manifest. Note that\nsome scripts have special meanings and will be invoked automatically by other\nactions of the package manager (eg. \npost-install\n or \npre-publish\n).\n\n\nExample\n\n\n{\n\n  \n\"scripts\"\n:\n \n{\n\n    \n\"build-docs\"\n:\n \n\"!mkdocs build\"\n,\n\n    \n\"pre-publish\"\n:\n \n\"scripts/pre-publish.py\"\n\n  \n}\n\n\n}\n\n\n\n\n\n\n$ nodepy-pm run build-docs\n\n\n\n\n\n\n\nuninstall\n\n\nnodepy-pm uninstall [-g,--global] PACKAGES\n\n\n\n\n\nUninstalls one or more previously installed PACKAGES.\n\n\n\n\nupload\n\n\nnodepy-pm upload [-f, --force] [-u, --user] [-p, --password] FILENAME\n\n\n\n\n\nFor the current version that is specified in the \npackage.json\n of your\nproject, uploads the specified FILENAME to the package registry. If the\nversion and/or package does not exist at the time of the upload, the file\nwill be rejected unless you upload the distribution archive created with\n\nnodepy-pm dist\n first. If you upload the distribution archive, the\npackage and package version will be created and assigned to your account.\n\n\n\n\nNote\n: You should prefer to use the \nnodepy-pm publish\n command\nto publish your package as it is less error prone and will also invoke\nthe \npre-publish\n script if you have one specified in your package manifest.\n\n\n\n\nRead about the \nRequirements\n to publish a package.",
            "title": "CLI"
        },
        {
            "location": "/nodepy-pm/cli/#nodepy-pm-command-line-interface",
            "text": "",
            "title": "nodepy-pm -- Command-line Interface"
        },
        {
            "location": "/nodepy-pm/cli/#bin",
            "text": "nodepy-pm bin [--global] [--pip]  Prints the local or global binary directory that  nodepy-pm  installs to. If\nyou pass the  --pip  switch, the Pip binary directory will be printed instead.  Note that  nodepy-pm install  will automatically create wrappers in\nthe Node.py binary directory that reference respective commands in the Pip\nbinary directory, thus if you have Python dependencies that expose scripts,\nyou only need to add the Node.py binary directory to your path.  The local binary directory is  nodepy_modules/.bin .",
            "title": "bin"
        },
        {
            "location": "/nodepy-pm/cli/#dist",
            "text": "nodepy-pm dist  Create a  .tar.gz  archive from your package and save it into the  dist/ \ndirectory. If you want to publish the package on the registry, use the nodepy-pm publish  command.",
            "title": "dist"
        },
        {
            "location": "/nodepy-pm/cli/#init",
            "text": "nodepy-pm init  Initialize a  package.json  file in the current working directory.",
            "title": "init"
        },
        {
            "location": "/nodepy-pm/cli/#install",
            "text": "nodepy-pm install [-g,--global] [--root] [-e,--develop] [-P,--packagedir]\n             [-I,--ignore-installed]\n             [--pip-separate-process] [--dev/--production] [--save]\n             [--save-dev] [--recursive] [PACKAGES]  Installs one or more Node.py packages from the package registry, package\ndistribution files (see  nodepy-pm dist ) or a directory. If no PACKAGES\nare specified, the dependencies of the current package are installed. In that\ncase, the  --dev  switch is enabled by default, otherwise  --production  is\nthe default.  The  PACKAGES  argument, if specified, can be of the following type:   A package name and version selector of the format  <package>[@<version>] ,\n  in which case the package will be looked up and installed from the package\n  registry.  An existing directory that contains a  package.json  to install from.  A Git URL in the format  git+<url>[@<ref>]  to install the package from.  A Python package requirement in the format  py/<req>   With  --dev  enabled, the development dependencies of the packages are\ninstalled additionally to their normal runtime dependencies. Note that\ndevelopment dependencies are never installed transitively.  Using  --global  will install the PACKAGES into the user-global modules directory\nand creates scripts in the global binaries directory. Note that \u201cglobal\u201d always\nrefers to the \u201cUser-space global\u201d. Global installations are only supposed to\nbe used for command-line tools. Node.py will not look to resolve  require() s\nin the global modules directory for your local project.  The  --root  option will install the package into the global Python prefix and\nshould only be used when a command-line utility should be installed for all\nusers of a system.   Note: Inside a virtual environment,  -g,--global  will be promoted to  --root .   The  --develop  flag can only be used when installing a package from a\ndirectory. Using this flag will install the package in development mode, which\nmeans that a  .nodepy-link  file will be created instead of the package\ncontents being copied. Node.py will read this link and continue resolving require() s in the target directory (which is your package that you installed\nwith  --develop ).  The  -I,--ignore-installed  option will be passed to  pip install .  The  -P,--packagedir  option can be used to change the directory from which\nthe  package.json  will be read (in case of an installation without packages\nspecified on the command-line) or written to (in case of  --save  and --save-dev ).  Using the  --save  or  --save-dev  options requires a  package.json  in the\ncurrent working directory to which the new dependencies can be added. Note\nalso that the package manifest will be re-written with a strict 2-space\nindentation.  The  --recursive  option can be used to make sure dependencies of already\nsatisfied dependencies are satisfied as well. This can be useful if you\nuninstall a dependencies of another package and want to re-install them\nwithout remembering them all.",
            "title": "install"
        },
        {
            "location": "/nodepy-pm/cli/#publish",
            "text": "nodepy-pm publish [-f,--force] [-u,--user] [-p,--password]  A combination of  nodepy-pm dist  and  nodepy-pm upload  that also\ninvokes the  pre-publish  and  post-publish   scripts .  Requirements  In order to publish a package to  ppym.org , it must\nmeet the following requirements:   The  name  of the package must be scoped with your username (ie.  @username/packagename )  The  license  field in  package.json  must not be empty   After a package version has been uploaded to the registry, arbitrary files\nmay be uploaded to that version as well. This is intended to be used for\nadditional files that may be downloaded by the actual package when necessary.\nNote that https://ppym.org currently has a size upload limit of 2MiB.  It is important that you read and understand the  PPYM Registry Terms of Use \nbefore you publish packages and upload content to the registry.",
            "title": "publish"
        },
        {
            "location": "/nodepy-pm/cli/#register",
            "text": "nodepy-pm register [--agree-tos] [--save]  Register a new account on the package registry. Note that you can change the\nURL to the registry being used in the  ~/.ppymrc  file. By default, it will\npoint to https://ppym.org.  $ cat ~/.ppymrc registry = http://localhost:8000",
            "title": "register"
        },
        {
            "location": "/nodepy-pm/cli/#run",
            "text": "nodepy-pm run SCRIPT [ARGS]  Runs the SCRIPT that is specified in the current package\u2019s manifest. Note that\nsome scripts have special meanings and will be invoked automatically by other\nactions of the package manager (eg.  post-install  or  pre-publish ).  Example  { \n   \"scripts\" :   { \n     \"build-docs\" :   \"!mkdocs build\" , \n     \"pre-publish\" :   \"scripts/pre-publish.py\" \n   }  }   $ nodepy-pm run build-docs",
            "title": "run"
        },
        {
            "location": "/nodepy-pm/cli/#uninstall",
            "text": "nodepy-pm uninstall [-g,--global] PACKAGES  Uninstalls one or more previously installed PACKAGES.",
            "title": "uninstall"
        },
        {
            "location": "/nodepy-pm/cli/#upload",
            "text": "nodepy-pm upload [-f, --force] [-u, --user] [-p, --password] FILENAME  For the current version that is specified in the  package.json  of your\nproject, uploads the specified FILENAME to the package registry. If the\nversion and/or package does not exist at the time of the upload, the file\nwill be rejected unless you upload the distribution archive created with nodepy-pm dist  first. If you upload the distribution archive, the\npackage and package version will be created and assigned to your account.   Note : You should prefer to use the  nodepy-pm publish  command\nto publish your package as it is less error prone and will also invoke\nthe  pre-publish  script if you have one specified in your package manifest.   Read about the  Requirements  to publish a package.",
            "title": "upload"
        }
    ]
}